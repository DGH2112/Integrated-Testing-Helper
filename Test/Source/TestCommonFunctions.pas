(**

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

  @stopdocumentation @nochecks No checks for tests

  @license

    Integrated Testing helper is a RAD Studio plug-in for running pre and post
    build processes.
    
    Copyright (C) 2019  David Hoyle (https://github.com/DGH2112/Integrated-Testing-Helper)

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

**)

Unit TestCommonFunctions;

Interface

Uses
  TestFramework,
  Windows,
  SysUtils,
  Classes,
  Graphics,
  ITHelper.ExternalProcessInfo,
  ITHelper.CommonFunctions;

Type
  TestApplicationFunctions = Class(TTestCase)
  Published
    Procedure TestLike;
    Procedure TestDGHFindOnPath;
    Procedure TestDGHCreateProcess;
    Procedure TestDGHPathRelativePathTo;
  End;

Implementation

Type
  TDGHCreateProcessHandler = Class
  Strict Private
    FOutput: TStringList;
  Strict Protected
  Public
    Constructor Create(Output: TStringList);
    Procedure IdleHandler;
    Procedure ProcessMsgHandler(Const strMsg: String; Var boolAbort: Boolean);
    Property Output: TStringList Read FOutput;
  End;

{ TDGHCreateProcessHandler }

Constructor TDGHCreateProcessHandler.Create(Output: TStringList);
Begin
  FOutput := Output;
End;

Procedure TDGHCreateProcessHandler.IdleHandler;

Begin
  // Do nothing;
End;

Procedure TDGHCreateProcessHandler.ProcessMsgHandler(Const strMsg: String; Var boolAbort: Boolean);

Begin
  FOutput.Add(strMsg);
End;

Procedure TestApplicationFunctions.TestDGHCreateProcess;

Var
  Process    : TITHProcessInfo;
  ProcMsgHndr: TDGHCreateProcessHandler;
  iResult    : Integer;
  slLines    : TStringList;
  strDrive   : String;

Begin
  strDrive            := ExtractFileDrive(ParamStr(0));
  Process.FEnabled := True;
  Process.FEXE     := strDrive + '\Documents\RAD Studio\Library\Test\SuccessConsoleApp.exe';
  Process.FParams  := '';
  Process.FDir     := strDrive + '\Documents\RAD Studio\Library\Test\';
  slLines          := TStringList.Create;
  Try
    ProcMsgHndr := TDGHCreateProcessHandler.Create(slLines);
    Try
      iResult := DGHCreateProcess(Process, ProcMsgHndr.ProcessMsgHandler, ProcMsgHndr.IdleHandler);
      CheckEquals(0, iResult, 'SuccessConsoleApp ERRORLEVEL');
      CheckEquals(2, ProcMsgHndr.Output.Count);
      CheckEquals('This allocation runs successfully and', ProcMsgHndr.Output[0]);
      CheckEquals('returns an ERRORLEVEL = 0.', ProcMsgHndr.Output[1]);
      slLines.Clear;
      Process.FEXE := strDrive + '\Documents\RAD Studio\Library\Test\FailureConsoleApp.exe';
      iResult := DGHCreateProcess(Process, ProcMsgHndr.ProcessMsgHandler,
        ProcMsgHndr.IdleHandler);
      CheckEquals(1, iResult, 'SuccessConsoleApp ERRORLEVEL');
      CheckEquals(2, ProcMsgHndr.Output.Count);
      CheckEquals('This allocation runs and fails and', ProcMsgHndr.Output[0]);
      CheckEquals('in doing so returns an ERRORLEVEL = 1.', ProcMsgHndr.Output[1]);
    Finally
      ProcMsgHndr.Free;
    End;
  Finally
    slLines.Free;
  End;
End;

Procedure TestApplicationFunctions.TestDGHFindOnPath;

Var
  strFileName: String;

Begin
  strFileName := 'notepad.exe';
  Check(DGHFindOnPath(strFileName, ''), 'Check for notepad.exe');
  CheckEquals('C:\WINDOWS\system32\notepad.exe', strFileName);
  strFileName := 'regedit.exe';
  Check(DGHFindOnPath(strFileName, ''), 'Check for regedit.exe');
  CheckEquals('C:\WINDOWS\system32\regedit.exe', strFileName);
  strFileName := 'cmd.exe';
  Check(DGHFindOnPath(strFileName, ''), 'Check for cmd.exe');
  CheckEquals('C:\WINDOWS\system32\cmd.exe', strFileName);
End;

Procedure TestApplicationFunctions.TestDGHPathRelativePathTo;

Var
  strFile: String;

Begin
  strFile :=
    'E:\Hoyld\Borland Studio Projects\IDE Addins\Integrated Testing Helper\Source\TestingHelperWizard.pas';
  CheckEquals(True, DGHPathRelativePathTo('E:\Hoyld\Borland Studio Projects\', strFile));
  CheckEquals
    ('IDE Addins\Integrated Testing Helper\Source\TestingHelperWizard.pas', strFile);

  strFile :=
    'E:\Hoyld\Borland Studio Projects\IDE Addins\Integrated Testing Helper\Source\TestingHelperWizard.pas';
  CheckEquals(True, DGHPathRelativePathTo('E:\Hoyld\Borland Studio Projects\Library\',
    strFile));
  CheckEquals
    ('..\IDE Addins\Integrated Testing Helper\Source\TestingHelperWizard.pas', strFile);

  strFile :=
    'E:\Hoyld\Borland Studio Projects\IDE Addins\Integrated Testing Helper\Source\TestingHelperWizard.pas';
  CheckEquals(True, DGHPathRelativePathTo
    ('E:\Hoyld\borland studio projects\Library\Tests\', strFile));
  CheckEquals
    ('..\..\IDE Addins\Integrated Testing Helper\Source\TestingHelperWizard.pas',
    strFile);

  strFile := 'TestingHelperWizard.pas';
  CheckEquals(False, DGHPathRelativePathTo('E:\Hoyld\borland studio projects\', strFile));
  CheckEquals('TestingHelperWizard.pas', strFile);

  strFile :=
    '\\CJVRUG1\Grouped\Hoyld\Borland Studio Projects\IDE Addins\Integrated Testing Helper\Source\TestingHelperWizard.pas';
  CheckEquals(True, DGHPathRelativePathTo
    ('\\CJVRUG1\Grouped\Hoyld\borland studio projects\', strFile));
  CheckEquals
    ('IDE Addins\Integrated Testing Helper\Source\TestingHelperWizard.pas', strFile);

  strFile :=
    '\\CJVRUG2\Grouped\Hoyld\Borland Studio Projects\IDE Addins\Integrated Testing Helper\Source\TestingHelperWizard.pas';
  CheckEquals(False, DGHPathRelativePathTo
    ('\\CJVRUG1\Grouped\Hoyld\borland studio projects\', strFile));
  CheckEquals
    ('\\CJVRUG2\Grouped\Hoyld\Borland Studio Projects\IDE Addins\Integrated Testing Helper\Source\TestingHelperWizard.pas',
    strFile);
End;

Procedure TestApplicationFunctions.TestLike;

Const
  strText = 'Mary had a little lamb';

Begin
  Check(Like('mary*', strText), '1');
  Check(Not Like('mry*', strText), '2');
  Check(Like('*lamb', strText), '3');
  Check(Not Like('*lmb', strText), '4');
  Check(Like('*little*', strText), '5');
  Check(Not Like('*litle*', strText), '6');
  Check(Like('*had*little*', strText), '7');
  Check(Not Like('*had*litle*', strText), '8');
  Check(Not Like('*little*had*', strText), '9');
  Check(Like('*library*testprojectdll*;*', 'Library TestProjectDLL;'), '10');
  Check(Like('*library*TestProjectDLL*;*', 'Library TestProjectDLL;'), '11');
  Check(Like('*', ''));
  Check(Like('*', strText));
End;

Initialization
  // Register any test cases with the test runner
  RegisterTest('Common Functions', TestApplicationFunctions.Suite);
End.
